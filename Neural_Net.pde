float[][] getWeights(){
  float[][] weights = new float[weightconfig.length][weightconfig[0]];
  for(int i = 0; i < weightconfig[0]; i++)//append layer 1
    weights[0][i] = random(-1, 1);//random float between -1 and 1
  for(int i = 1; i < weightconfig.length; i++)//append layers 2 and 3
    for(int x = 0; x <= weightconfig[i]; x++)
      weights[i][x] = random(-1, 1);//weights are random values between -1 and 1
  return weights;
}
float[][] setWeights(){
  //float[][] weights = {{-0.56572115, 0.8187733, -0.33312675, 0.19891706, 0.38389346, -0.42762408, 0.6118907, -0.7410642, 0.49285322, -0.28467196, 0.04379116, -0.64488846, -0.5947807, 0.0016095452, 0.11602484, 0.043708615, 0.6180674, 0.10006526, -0.12570308, 0.6582484, -0.43211502, -0.17009667, 0.84043896, -0.122084394, 0.26403725, 0.029415734, 0.84390056, 0.40112576, 0.066045836, 0.49637017, 0.11253999, 0.5476912, -0.7660155, 0.17650723, 0.9717897, -0.49917108, -0.067278616, 0.4205295, 0.114013016, -0.257316, 0.67378795, -0.031093474, 0.41551366, 0.14526446, 0.48903137, 0.42197776, 0.102644905, 0.08535676, 0.8998863, 0.25074098, 0.6466646, 0.959783, 0.34619105, 0.23646116, -0.25725308, -0.7756489, 0.94874156, 0.35656658, -0.25105533, 0.1364565, 0.83119017, -0.13018231, 0.105967924, 0.036831412, 0.3271871, 0.8256346, 0.01620793, 0.070492685, 0.0036096647, 0.054679185, -0.066349946, 0.086524665, 0.7637949, 0.1342314, -0.45778543, -0.2964569, 0.121701725, 0.08840315, -0.032701932, 0.19023803, -0.6466298, -0.20548503, 0.2184752, 0.070879, 0.47165215, 0.48915464, -0.48263636, -0.1811535, -0.7381054, 0.20098232, 0.93567705, 0.09531991, 0.09001717, -0.073144995, -0.39904833, 0.8349647, 0.8957509, 0.44535705, -0.06174612, -0.93902624, -0.47952357, -0.49678627, -0.56791085, -0.33956978, 0.27775455, -0.20729461, 0.45389226, 0.14071333, 0.26875535, -0.2863064, 0.17514339, 0.66438395, 0.17141512, 0.82682204, 0.7224263, -0.5869038, -0.24726939, 0.22465155, 0.037635185, -0.63984907, 0.27882594, -0.14444183, 0.18356983, 0.78362095, 0.1360921, 0.40791133, -0.09487164, 0.13811909, 0.81517667, 0.12020549, 0.6032663, 0.14085281, -0.036624253, -0.30271128, 0.5412379, -0.15559049, 0.72363555, 0.8200416, 0.07073319, 0.004497193, 0.08885062, -0.44206917, -0.4743513, -0.2496406, 0.19923946, -0.7490055, -0.2642026, -0.71795154, -0.1989507, 0.6774839, 0.40695417, 0.51174366, 0.36261225, 0.8268076, 0.7807434, -0.6601207, 0.007367256, 0.098841526, -0.69231534, -0.5331792, }, {0.010714543, 0.0230622, 0.04980643, 0.03742806, 0.023794038, 0.03873607, -0.79863834, -0.8770659, -0.022445291, 0.025922213, -0.5855756, 0.16672826, 0.018865237, 0.040794402, 0.023306796, 0.02182672, 0.036706477, 0.04337494, 0.04361891, 0.03694667, 0.04278945, 0.04627686, 0.033486597, 0.046528786, 0.016548395, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, }, {0.023091728, 0.044757433, 0.048564292, 0.048746698, 0.03803596, 0.028184827, -0.46063745, -0.011608651, 0.46504533, -0.025012342, -0.045071796, 0.024246916, -0.015601575, 0.0267373, 0.036239583, 0.4029653, -0.013273826, -0.34899879, -0.6820966, 0.015440015, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
  //float[][] weights = {{0.54384494, 0.18502513, 0.36807787, 0.119869135, 0.40365356, -0.22411261, 0.07911518, 0.76842606, -0.045900337, 0.07734428, -0.7684399, 0.20518121, 0.73752177, 0.025364518, -0.02237939, 0.93658566, 0.87423897, -0.39254045, -0.6429908, 0.1478022, 0.14883952, -0.34850973, 0.26466116, 0.6193319, 0.08667465, 0.51375294, 0.0641792, 0.0038739443, 0.22400844, 0.35839593, -0.2982121, 0.55889875, 0.7157224, 0.937263, -0.646989, -0.114709206, -0.81498766, -0.12637293, -0.21509251, -0.7923247, -0.46012887, 0.10161662, 0.9691644, 0.12047381, 0.69788486, -0.3046838, 0.17068301, 0.6295772, -0.85027313, -0.1597525, -0.19292283, 0.7161843, 0.9618859, 0.9339411, -0.14971474, -0.47915238, -0.4810381, -0.41925657, 0.6381202, -0.4843446, 0.54944164, -0.04491265, -0.64395815, 0.056828212, 0.44779092, -0.09438309, 0.34061584, 0.63297206, -0.004739307, 0.29679018, -0.16262783, 0.1183281, 0.28138188, 0.18996032, 0.44968668, -0.60523957, 0.5065761, 0.99805725, 0.36396247, 0.8084492, -0.07605194, -0.91678286, -0.32293126, 0.61708903, -0.39960515, 0.25094306, 0.40884337, 0.1624112, 0.6486312, 0.64276356, -0.04639977, -0.7837978, 0.07229062, 0.86788726, 0.6607337, 0.18934295, 0.44216478, -0.2149056, 0.48513177, -0.6630213, 0.90499276, 0.10460007, 0.04136198, -0.26201645, 0.28462985, 0.17724423, 0.8652197, 0.35438, 0.31027308, 0.6743119, -0.65767753, 0.32823142, 0.7499964, 0.2223076, -0.41543385, -0.37198424, -0.8329479, 0.943746, -0.75664943, -0.59769595, 0.73184586, -0.6746161, -0.66332614, 0.07712448, -0.94069844, 0.55219734, 0.67249393, -0.6084085, 0.70521367, -0.02408607, 0.61355656, 0.018878669, 0.9403929, -0.23787978, -0.04122073, 0.08866902, -0.51845604, 0.15956907, -0.6134101, 0.86238974, 0.16484734, -0.117178686, 0.07279794, -0.24962774, 0.25645486, 0.4825142, 0.14744565, 0.17347154, 0.11961197, 0.062275715, 0.6234758, -0.83041155, 0.7501342, 0.44276762, 0.15874463, 0.85303664, 0.0023541078, 0.16146433, -0.6968546, 0.49738696, -0.15964587, 0.8667165, 0.06654234, 0.8178171, 0.45497778, -0.6242611, 0.69094586, -0.4387741, 0.31194347, -0.038526494, }, {0.050317824, 0.080983594, 0.22319125, 0.11657024, 0.1259394, 0.1104236, 0.05176889, -0.076437585, 0.21558274, 0.13521066, -0.063373886, 0.19788039, -0.6326395, 0.13449526, 0.18236813, 0.084023245, 0.17177522, -0.039577913, -0.9587219, 0.2395154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, }};
  float[][] weights = {{-0.33823723, 0.3563271, 0.082848236, -0.16647255, 0.92105126, 0.062180582, 0.3807504, 0.05080856, 0.9585296, -0.16443315, -0.5729474, -0.72546923, 0.7278428, 0.22042568, 0.4850687, -0.034733094, -0.68644017, -0.36121407, -0.02956883, -0.58763355, 0.9075747, -0.28474808, 0.5098902, -0.2984115, -0.02012562, -0.37490675, 0.12560926, -0.4438137, -0.22875448, 0.18239722, -0.31147414, -0.22381368, -0.51922095, -0.31158817, -0.9162475, 0.43078816, 0.9284588, -0.0057848687, 0.027926318, 0.0779272, -0.013268698, -0.31204382, 0.5112174, 0.53796566, 0.7402923, -0.22309664, 0.35697678, 0.49824658, 0.8753077, 0.028564073, -0.57701516, -0.63286304, 0.055940475, 0.47707638, -0.32607728, -0.20273799, 0.7329807, -0.3873478, -0.22689113, -0.2775939, -0.10399905, -0.13020353, 0.7081048, -0.7022781, -0.7550424, 0.6213347, -0.2970947, 0.0017493144, -0.6110391, 0.41540316, 0.0424309, 7.2941184E-5, -0.31254762, 0.39153892, -0.3230308, -0.74177814, 0.9517466, 0.19418837, 0.37299025, -0.50972944, -0.11935245, 0.544944, 0.06548538, -0.60498345, -0.30685043, 0.16841567, -0.5197734, 0.32433462, 0.054473527, -0.8527374, 0.5053505, 0.88794804, 0.9331654, -0.1876516, 0.75855494, 0.7870972, 0.5743146, 0.054539748, -0.33982536, 0.5233109, 0.2265574, 0.6804952, -0.17009676, -0.004789969, -0.05947373, 0.23988979, 0.17245978, 0.3109095, 0.8016759, 0.09468927, -0.8575254, -0.15703487, 0.77400815, 0.12192939, -0.21808204, -0.40088436, -0.8423665, -0.26981324, 0.07806961, 0.051498193, 0.78980255, 0.6832415, 6.762557E-4, -0.61352, -0.16175652, 0.7974331, -0.120722346, 0.25065225, 0.4347525, 0.80586237, -0.7974922, -0.3182845, -0.4625314, 0.67987216, 0.68424135, -0.54393995, -0.5860065, 0.5531306, -0.15200946, 0.8960149, 0.8581717, 0.23725557, 0.14057955, 0.9223479, -0.3360063, -0.565778, 0.41370592, 0.7949861, 0.5718828, -0.69343233, -0.29931268, -0.0774025, 0.75585663, -0.3313344, -0.5652261, -0.22234693, 0.69075584, -0.6966838, -0.35583907, -0.23038387, 0.5769755, -0.02459899, -0.5198883, 0.87414813, -0.52936184, -0.2680415, 0.17226297, 0.52707857, 0.66508603, -0.42939138, -0.13657546, 0.4367305, -0.47327867, -0.026090227, 0.08990997, 0.06525948, 0.052217193, 0.7392326, -0.72216135, 0.2158975, 0.067492805, -0.448259, 0.7043107, -0.49583378, -0.2204727, -0.19330779, -0.29876268, 0.12794808, 0.8097948, 0.19854988, -0.06457783, -0.19235843, 0.31375325, 0.69505954, 0.16140406, 0.33043355, 0.2962141, -0.68443507, 0.8442247, 0.66855896, -0.12537771, -0.7521476, 0.025006603, 0.01316762, 0.7677322, -0.5805735, -0.07184806, 0.65054584, -0.6116586, 0.24153087, 0.7337313, -0.25758427, -0.011061365, 0.07956146, -0.08819748, -0.19742721, 0.04894627, 0.22253157, 0.7225205, -0.5471691, -0.014266871, 0.6980439, 0.48103717, 0.13639073, 0.32442927, 0.49470532, 0.35521883, -0.158572, 0.4565201, -0.17039654, 0.47616702, 0.32625747, 0.03360478, 0.60580957, -0.68297863, 0.8451876, 0.88610405, 0.41116887, 0.049735524, -0.84826237, 0.74827224, -0.7690923, 0.87532645, 0.5154123, -0.43990692, -0.47638297, 0.16544479, -0.07091637, -0.61908835, 0.7310989, 0.041381307, 0.8157626, 0.9537029, -0.6853721, 0.3708079, -0.36991206, -0.17726226, -0.48013318, 0.3093485, 0.05125493, -0.2732592, -0.40966365, -0.3489292, 0.5916673, -0.5203221, -0.5219227, -0.49407384, 0.61165303, -0.43924952, -0.53588927, 0.30496028, -0.15578324, 0.6516005, 0.11147933, -0.38101715, -0.7652569, -0.1827192, 0.10622239, -0.807055, -0.0026360303, 0.786119, -0.08698549, 0.75504476, 0.13550267, 0.49659324, 0.074246705, -0.3988079, -0.504227, 0.7024935, -0.7749191, 0.08183742, 0.8173697, 0.45469218, 0.20705394, 0.05796435, 0.5282054, -0.052679587, -0.4702783, 0.08965654, 0.73587435, 0.02096273, 0.6188648, 0.37716952, -0.9025489, 0.068832085, 0.83623296, 0.10536224, 0.6731301, -0.5727427, 0.3870394, 0.96499217, 0.050177418, -0.37130186, 0.18703115, -0.89163256, 0.8133787, 0.8853742, 0.37512994, 0.48078945, 0.36866936, }, {-0.7173979, 0.0242627, -2.1497905E-4, 0.8091296, 0.49645174, -0.8470299, -0.9797505, -0.0014398247, -0.42392325, 0.039071754, 0.03577479, 0.008506179, 0.76636577, 0.03367491, 0.039411616, 0.011325029, 0.020779718, -0.006242594, 0.99886954, 0.030637985, 0.9276984, -0.2579223, -0.011853105, -0.615834, 0.010151404, 0.003318897, -0.024824182, -0.31770897, 0.009128016, 0.0102248555, 0.006322098, 0.91978097, -0.02809535, 0.018734632, -0.5906248, 0.036842577, 0.034594897, 0.0061344565, 0.041467782, 0.02427055, 0.014431432, -0.70872736, -0.0038106113, 0.049151912, -0.0011980654, 0.047159795, -0.8146255, 0.04266583, -0.7445011, 0.024614945, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, }, {0.0010357857, -0.038146593, -0.02620773, -0.048801456, -0.007980007, -0.009370387, -0.041511003, 0.0020436645, 0.22058702, -0.52077615, -0.51558375, -0.2414043, 0.40787613, 0.026907912, -0.0056527555, 0.2657565, -0.43823373, 0.03696254, 0.26995826, 0.02374279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, }}; 
  return weights;
}
float[][] Mutate(float[][] weights, int[] wconfig){
  float[][] newWeights = new float[wconfig.length][wconfig[0]];
  for(int x = 0; x < wconfig[0]; x++){//for each weight in layer 1
    int rint = (int)random(1, 101);
    if(rint > 0 && rint <= 10){//30% mutation rate
      int operation = (int)random(1,3);
      float mutation = random(0, .1);//between 0 and 10% mutation
      if(operation == 1){//addition
        if(weights[0][x] + mutation <= 1)
          newWeights[0][x] = weights[0][x] + mutation;
        else
          newWeights[0][x] = weights[0][x] - mutation;
      }else{//subtraction
        if(weights[0][x] - mutation >= 0)
          newWeights[0][x] = weights[0][x] - mutation;
        else
          newWeights[0][x] = weights[0][x] + mutation;
      }
    }else
      newWeights[0][x] = weights[0][x]; 
  }
  for(int i = 1; i < wconfig.length; i++){
    for(int x = 0; x < wconfig[i]; x++){//for each newWeights
      int rint = (int)random(1, 101);
      if(rint > 0 && rint <= 10){//10% mutation rate
        int operation = (int)random(1,3);
        float mutation = random(0, .05);//between 1 and 5% mutation
        if(operation == 1){//addition
          if(weights[i][x] + mutation <= 1)
            newWeights[i][x] = newWeights[i][x] + mutation;
          else
          newWeights[i][x] = newWeights[i][x] - mutation;
        }else{//subtraction
          if(weights[i][x] - mutation >= 0)
            newWeights[i][x] = newWeights[i][x] - mutation;
          else
            newWeights[i][x] = newWeights[i][x] + mutation;
        }
      }else
        newWeights[i][x] = weights[i][x];
    }
  }
  return newWeights;
}
int MLMove(int[] inputs, float[][] weights){//returns 1, 2, 3, or 4 based on different inputs  
  int[][] biases = {{0,0,0,0,0}, {0,0,0,0,0}, {0,0,0,0}};//each list is a layered connection, starting with HL1 and ending with output biases
  float[] Neurons = new float[0];//all neurons for a layer, set to 0 so computer doesn't think it won't be init
  float weightedsum;//sum of each weight * by all inputs
  float[] storedNeurons = new float[0];//just initializing so that the program doesn't freak out
  int wnum = 0;
  for(int layer = 0; layer < netconfig.length; layer++){//for each layer
    Neurons = new float[netconfig[layer]];//prepare neurons to be changed
    weightedsum = 0;
    for(int i = 0; i < netconfig[layer]; i++){//for each neuron in layer
      if(layer == 0){
        for(int x = 0; x < inputs.length; x++){//for each input neuron
            weightedsum += weights[layer][wnum] * inputs[x];
            wnum++;
        }
      }else{
        for(int x = 0; x < storedNeurons.length; x++){//for every other neuron
          weightedsum += weights[layer][wnum] * storedNeurons[x];
          wnum++;
        }
      }
      Neurons[i] = Sigmoid(weightedsum);// + biases[layer][i]);//NEURON VALUE == Sigmoid(weightedsum + bias)   weightedsum == foreach weight, take every input and the weight and multiply them, add to weightedsum
      //println("neturon " + (i + 1) + " = " + Neurons[i]);
    }
    storedNeurons = new float[netconfig[layer]];
    for(int i = 0; i < storedNeurons.length; i++)
      storedNeurons[i] = Neurons[i];
    wnum = 0;
  }
  int move = 0;
  for(int i = 1; i < Neurons.length; i++){//for each output neuron
    if(Neurons[i] > Neurons[move]){
      move = i;
    }
    else if(Neurons[i] == Neurons[move]){//if two neurons somehow have the same value (will never realistically happen)
      int rint = (int)random(1, 3);
      if(rint == 1)//chooses random one
        move = i;
    }
  }
  move++;
  return move;
}
float Sigmoid(float input){
   return (1 / (1 + pow(2.71828, -1 * input)));//2.71828 = e
}
